@model Fast.Web.Models.CustomerListModel
@using Fast.Web.Resources;
@using Newtonsoft.Json;

@{
    var territories = Model.Customers.Select(x => x.teritorry).Distinct().ToList();
    Model.Customers = Model.Customers.Where(x => x.teritorry == Model.Territory).OrderBy(x => x.customer_code).ToList();

    var page = Int32.Parse(Request.Params["page"]);

    var skip = 0;
    var take = 20;

    if (page > 1)
    {
        skip = (take * (page - 1)) - 1;
    }

    Model.Customers = Model.Customers.Skip(skip).Take(take).ToList();
}

@section Styles{
    <link href="~/Content/dashforge/assets/css/dashforge.css" rel="stylesheet">
    <script src='https://api.mapbox.com/mapbox-gl-js/v1.4.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v1.4.1/mapbox-gl.css' rel='stylesheet' />
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.css" type="text/css" />
    <!-- Promise polyfill script required to use Mapbox GL Geocoder in IE 11 -->
    <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>
    <script src="https://unpkg.com/@("@")mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>
    <script src="https://api.tiles.mapbox.com/mapbox.js/plugins/turf/v3.0.11/turf.min.js"></script>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.2/mapbox-gl-directions.js"></script>
    <link rel="stylesheet"
          href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.2/mapbox-gl-directions.css"
          type="text/css" />

    <style>
        .marker {
            display: block;
            border: none;
            //border-radius: 50%;
            cursor: pointer;
            padding: 0;
            background-color: transparent;
        }
    </style>
}

<div class="content content-fixed content-auth-alt pd-0-f">
    <div class="container-fluid ht-100p pd-0-f">
        <div class="ht-100p d-flex flex-column">
            <div class="row mg-0">
                <div class="col-9">
                    <div id="map" style="min-height:500px"></div>
                </div>
                <div class="col-3" style="height:500px;overflow: scroll;">
                    <br>
                    Select Territory:
                    <select class="custom-select" id="territory_selection">
                        @foreach (var teri in territories)
                        {
                            <option value="@teri" @(teri == Model.Territory ? "selected" : "")>@teri</option>
                        }
                    </select>

                    <br><br>
                    You can drag &amp; drop to adjust the order
                    <ol class="cust-order pd-l-30 mg-t-10">
                        @foreach (var cust in Model.Customers)
                        {
                            <li data-id="@cust.ID" data-name="@cust.customer_code" class="pd-5">@cust.customer_code - @cust.customer_name</li>
                        }
                    </ol>

                    <div class="row pd-20">
                        <a class="btn btn-primary col-12" href="/Route/Direction?territory=@(Request.Params["territory"])&page=@(1+ Int32.Parse(Request.Params["page"]))">Next</a>
                    </div>
                </div>
            </div>
        </div>
    </div><!-- container -->
</div><!-- content -->

@section Scripts{
    <script src="~/Content/theme/js/jquery-1.10.0.min.js"></script>
    <script src="~/Content/dashforge/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/Content/dashforge/lib/jquery-sortable/js/jquery-sortable-min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDpjc1xdCmFJ6pptU_NVA54Cjpi_kqFaEU&libraries=geometry"></script>

    <script>
        var allcusts = @(Html.Raw((JsonConvert.SerializeObject(Model.Customers)).Replace("\n", "").Replace("\r", "").Replace("\t", "").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"")));
        var allterritories = @(Html.Raw((JsonConvert.SerializeObject(territories)).Replace("\n", "").Replace("\r", "").Replace("\t", "").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"")));
        var weekday = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']; //, 'Saturday', 'Sunday'
        var valid_loc = [];
        var geojson = {
            'type': 'FeatureCollection',
            'features': []
        };

        for (var i = 0; i < allcusts.length; i++) {
            var allcust = allcusts[i];
            var day_index = weekday.indexOf(allcust.visit_day)

            if (day_index < 0)
                day_index = 5;

            if (allcust.geographical_x == "NULL" || allcust.geographical_y == "NULL" || Math.abs(parseInt(allcust.geographical_x)) == 0 || Math.abs(parseInt(allcust.geographical_x)) > 1000 || Math.abs(parseInt(allcust.geographical_y)) > 1000) {
                // skip data2 yg ccd
            } else {
                valid_loc.push([allcust.geographical_y, allcust.geographical_x]);
                geojson.features.push({
                    'type': 'Feature',
                        'properties': {
                            'id': allcust.customer_code,
                            'territory': allcust.teritorry,
                            'visit': allcust.visit_day,
                            'message': '<b>' + allcust.customer_code + '</b><br>' + allcust.customer_name + '<br>' + allcust.customer_address + '<br>' + allcust.teritorry,
                            'iconSize': [30, 30],
                            'iconFile': '/content/marker/c_'+ allterritories.indexOf(allcust.teritorry) +'_'+day_index+'.png'
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': [allcust.geographical_y, allcust.geographical_x]
                        }
                });
            }
        }

        console.log(valid_loc);

        mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhbmlmIiwiYSI6ImNpc2I1YnJ4OTAwMDMydnFvZDU3YzRydnMifQ.V_ra23LFfun83xlNR6PaXA';
        var mapboxClient = mapboxSdk({
            accessToken: mapboxgl.accessToken
        });
        mapboxClient.geocoding.forwardGeocode({
                query: "@(Model.Customers[0].kecamatan + " " + Model.Customers[0].dati_II) indonesia",
                autocomplete: false,
                limit: 1
            })
            .send()
            .then(function(response) {
                if (
                    response &&
                    response.body &&
                    response.body.features &&
                    response.body.features.length
                ) {
                    var feature = response.body.features[0];

                    var map = new mapboxgl.Map({
                        container: 'map',
                        style: 'mapbox://styles/mapbox/streets-v11',
                        center: feature.center,
                        zoom: 13
                    });

                    var directions = new MapboxDirections({
                      accessToken: mapboxgl.accessToken,
                      unit: 'metric',
                      profile: 'cycling'
                    });

                    map.addControl(directions);

                    map.on('load', function () {
                        for (var i = 0; i < valid_loc.length; i++) {
                            if (i == 0)
                                directions.setOrigin(valid_loc[i]);
                            else if (i == (valid_loc.length - 1))
                                directions.setDestination(valid_loc[i]);
                            else
                                directions.addWaypoint(i-1, valid_loc[i]);
                        }
                    });

                    directions.on('route', function (e) {
                        console.log(e.route); // Logs the current route shown in the interface.
                    });

                    geojson.features.forEach(function(marker) {
                        // create a DOM element for the marker
                        var el = document.createElement('div');
                        el.id = marker.properties.id;
                        el.className = 'marker';
                        el.style.backgroundImage = 'url(' + marker.properties.iconFile + ')';
                        el.style.backgroundSize = marker.properties.iconSize[0] + 'px';
                        el.style.width = marker.properties.iconSize[0] + 'px';
                        el.style.height = marker.properties.iconSize[1] + 'px';

                        el.setAttribute('data-territory' , marker.properties.territory);
                        el.setAttribute('data-visit' , marker.properties.visit);

                        var popup = new mapboxgl.Popup({ offset: 25 }).setHTML(marker.properties.message);

                        //console.log(marker.geometry.coordinates);

                        // add marker to map
                        new mapboxgl.Marker(el)
                            .setLngLat(marker.geometry.coordinates)
                            .setPopup(popup) // sets a popup on this marker
                            .addTo(map);

                        el.addEventListener('click', function (e) {
                            if (!selecting) {
                                resetMarker();
                                updateArea();
                            }

                            setTarget(e.target);
                        });
                    });
                }
            });

    </script>

    <!--
    <script type="text/javascript">
        var allcusts = @(Html.Raw((JsonConvert.SerializeObject(Model.Customers)).Replace("\n", "").Replace("\r", "").Replace("\t", "").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"")));
        var allterritories = @(Html.Raw((JsonConvert.SerializeObject(territories)).Replace("\n", "").Replace("\r", "").Replace("\t", "").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"")));

        console.log(allterritories);

        var jsonString;
        var map;
        var markers = [];
        var markerselected = [];
        var markerselectedID = 0;
        var selecting = false;
        var geocoder = new google.maps.Geocoder();
        var infoWindow;
        var icon = "http://labs.google.com/ridefinder/images/mm_20_white.png";
        var icon_selected = "http://maps.google.com/mapfiles/arrow.png";

        function initialize() {
            //******************************************************************************************** INIT GMAP
            map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 0, lng: 0},
                zoom: 14,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            infoWindow = new google.maps.InfoWindow();

            //******************************************************************************************** SET CENTER OF THE MAP
            geocoder.geocode({'address': "@(Model.Customers[0].kecamatan + " " + Model.Customers[0].dati_II) indonesia"}, function(results, status) {
                if (status === 'OK') {
                    map.setCenter(results[0].geometry.location);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });

            function addMarkerEvent(marker, info) {
                //******************************************************************************************** KETIKA MARKER CLICKED
                google.maps.event.addListener(marker, "click", function (e) {
                    infoWindow.setContent(info);
                    infoWindow.open(map, marker);

                    //alert(marker.get('data_id'));
                    $('.cust-order').find('[data-id="' + markerselectedID + '"]').removeClass("bg-primary");
                    $('.cust-order').find('[data-id="' + marker.get('data_id') + '"]').addClass("bg-primary");
                    markerselectedID = marker.get('data_id');
                });
            }

            //******************************************************************************************** GAMBAR MARKER
            function initmarker() {
                for (var i = 0, allcust; allcust = allcusts[i]; i++) {
                    var locat = new google.maps.LatLng(allcust.geographical_x, allcust.geographical_y);
                    allcusts[i].koordinat = locat;
                    marker = new google.maps.Marker({
                        position: locat,
                        icon: {
                            url: icon,
                            labelOrigin: new google.maps.Point(6, 25)
                        },
                        label: {
                            text: String(i+1),
                            color: '#ef00ff',
                            fontSize: '14px',
                            fontWeight: 'bold'
                        },
                        //animation: google.maps.Animation.DROP,
                        map: map,
                        data_id: allcust.ID,
                        title: allcust.customer_code + " (" + allcust.teritorry + ")"
                    });

                    addMarkerEvent(marker, '<b>' + allcust.customer_code + '</b><br>' + allcust.customer_name + '<br>' + allcust.customer_address + '<br>' + allcust.teritorry);
                    markers[allcust.ID] = marker;
                }
            }
            initmarker();

            var directionsService = new google.maps.DirectionsService();

            var renderOptions = { draggable: true };
            var directionDisplay = new google.maps.DirectionsRenderer(renderOptions);

            //set the directions display service to the map
            directionDisplay.setMap(map);
            //set the directions display panel
            //panel is usually just and empty div.
            //This is where the turn by turn directions appear.
            //directionDisplay.setPanel(directionsPanel);

            //build the waypoints
            //free api allows a max of 9 total stops including the start and end address
            //premier allows a total of 25 stops.

            var waypoints = [];
            var last_locat = '';

            for (var i = 1; i < allcusts.length-1; i++) {
                allcust = allcusts[i];
                var locat = new google.maps.LatLng(allcust.geographical_x, allcust.geographical_y);

                waypoints.push({
                    location: locat,
                    stopover: true
                });

                last_locat = locat;
            }

            //set the starting address and destination address
            var originAddress = new google.maps.LatLng(allcusts[0].geographical_x, allcusts[0].geographical_y);
            var destinationAddress = last_locat;

            var request = {
                    origin: originAddress,
                    destination: destinationAddress,
                    waypoints: waypoints, //an array of waypoints
                    optimizeWaypoints: true, //set to true if you want google to determine the shortest route or false to use the order specified.
                    travelMode: google.maps.DirectionsTravelMode.DRIVING
                };

            //get the route from the directions service
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionDisplay.setDirections(response);
                }
                else {
                    //handle error
                }
            });

        }

        $(document).ready(function () {
            google.maps.event.addDomListener(window, 'load', initialize);

            $("#territory_selection").change(function () {
                window.location.href = "/Route/Direction?territory="+$(this).val()+"&page=1";
            })

            $('ol.cust-order li').click(function () {
                if (markerselected.length > 0) {
                    for (var i = 0, mark; mark = markerselected[i]; i++) {
                        mark.setIcon({
                            url: icon,
                            labelOrigin: new google.maps.Point(6, 25)
                        });
                    }
                }
                markerselected = [];

                (markers[$(this).attr('data-id')]).setIcon({
                            url: icon_selected,
                            labelOrigin: new google.maps.Point(6, 25)
                        });
                markerselected.push(markers[$(this).attr('data-id')]);
            })

        });
    </script>
    -->

}