@model Fast.Web.Models.CustomerListModel
@using Fast.Web.Resources;
@using Newtonsoft.Json;

@{
    var territories = Model.Customers.Select(x => x.teritorry).Distinct().ToList();
}

@section Styles{
    <link href="~/Content/dashforge/assets/css/dashforge.css" rel="stylesheet">

    <style>
    </style>
}

<div class="content content-fixed content-auth-alt pd-0-f">
    <div class="container-fluid ht-100p tx-center pd-0-f">
        <div class="ht-100p d-flex flex-column">
            <div class="row">
                <div class="col-10">
                    <div id="map" style="min-height:600px"></div>
                </div>
                <div class="col-2">
                    <hr>
                    <br>
                    Use Ctrl+click to select multiple markers, or
                    click some point to draw shape around markers to select them.
                    <br><br>
                    Selected markers:
                    <input id="selected_markers"><br>
                    <input type="button" onclick="clearSelection()" value="Clear selection"><br>

                </div>
            </div>
        </div>
    </div><!-- container -->
</div><!-- content -->

@section Scripts{
    <script src="~/Content/theme/js/jquery-1.10.0.min.js"></script>
    <script src="~/Content/dashforge/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDpjc1xdCmFJ6pptU_NVA54Cjpi_kqFaEU&libraries=geometry"></script>

    <script type="text/javascript">
        var allcusts = @(Html.Raw((JsonConvert.SerializeObject(Model.Customers)).Replace("\n", "").Replace("\r", "").Replace("\t", "").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"")));
        var allterritories = @(Html.Raw((JsonConvert.SerializeObject(territories)).Replace("\n", "").Replace("\r", "").Replace("\t", "").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"").Replace(" \"", "\"")));

        console.log(allterritories);

        var map;
        var markers = [];
        var markerselected = [];
        var polygon;
        var polygonMarkers = [];
        var polygonLocations = [];
        var geocoder = new google.maps.Geocoder();
        var infoWindow;
        var icons = ["mm_20_gray",
            "mm_20_green",
            "mm_20_orange",
            "mm_20_purple",
            "mm_20_red",
            "mm_20_yellow",
            "mm_20_blue",
            "mm_20_brown",
            "mm_20_black"];

        var icon_selected = "mm_20_white";

        function initialize() {
            //******************************************************************************************** INIT GMAP
            map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 0, lng: 0},
                zoom: 13,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            infoWindow = new google.maps.InfoWindow();

            //******************************************************************************************** SET CENTER OF THE MAP
            geocoder.geocode({'address': "@(Model.Customers[0].dati_II) indonesia"}, function(results, status) {
                if (status === 'OK') {
                    map.setCenter(results[0].geometry.location);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });

            function addMarkerEvent(marker, info) {
                //******************************************************************************************** KETIKA MARKER DROP
                google.maps.event.addListener(marker, "dragend", function (event) {
                    var lat = event.latLng.lat();
                    var lng = event.latLng.lng();

                    console.log(lat + ' , ' + lng);
                    console.log(marker.get('customer_code'));

                    for (var i = 0, allcust; allcust = allcusts[i]; i++) {
                        if (allcust.customer_code == marker.get('customer_code')) {
                            var locat = new google.maps.LatLng(lat, lng);
                            allcusts[i].koordinat = locat;
                        }
                    }

                });

                //******************************************************************************************** KETIKA MARKER CLICKED
                google.maps.event.addListener(marker, "click", function (event) {
                    if (event.ctrlKey) {
                        marker.setIcon("http://labs.google.com/ridefinder/images/" + icon_selected + ".png");

                        var a = 0;
                        if (document.getElementById('selected_markers').value = '') {
                            a = 1;
                        }
                        document.getElementById('selected_markers').value += (a++ > 0 ? ', ' : '') + marker.get('customer_code');

                    } else {
                        clearSelection();

                        marker.setIcon("http://labs.google.com/ridefinder/images/" + icon_selected + ".png");

                        document.getElementById('selected_markers').value = marker.get('customer_code');


                    }

                    markerselected.push(marker);

                    infoWindow.setContent(info);
                    infoWindow.open(map, marker);
                });
            }

            //******************************************************************************************** GAMBAR MARKER
            function initmarker() {
                var counter = -1;
                var last_territory = 0;
                for (var i = 0, allcust; allcust = allcusts[i]; i++) {
                    if (last_territory != allcust.teritorry) {
                        counter++;
                        console.log(last_territory);
                        last_territory = allcust.teritorry;
                    }

                    var locat = new google.maps.LatLng(allcust.geographical_x, allcust.geographical_y);
                    allcusts[i].koordinat = locat;
                    marker = new google.maps.Marker({
                        position: locat,
                        draggable: true,
                        icon: "http://labs.google.com/ridefinder/images/" + icons[counter] + ".png",
                        //animation: google.maps.Animation.DROP,
                        map: map,
                        customer_code: allcust.customer_code,
                        default_icon: "http://labs.google.com/ridefinder/images/" + icons[counter] + ".png",
                        title: allcust.customer_code + " (" + allcust.teritorry + ")"
                    });

                    addMarkerEvent(marker, '<b>' + allcust.customer_code + '</b><br>' + allcust.customer_name + '<br>' + allcust.customer_address + '<br>' + allcust.teritorry);
                    markers[allcust.customer_code] = marker;
                }
            }
            initmarker();
            

            //******************************************************************************************** GAMBAR POLYGON UNTUK SELECTION
            google.maps.event.addListener(map, 'click', function (e) {
                // set a marker there, with a small measle icon
                var position = e.latLng;
                polygonLocations.push(position);
                polygonMarkers.push(new google.maps.Marker({
                    icon: 'https://maps.gstatic.com/intl/en_ALL/mapfiles/markers2/measle.png',
                    position: position,
                    map: map
                }));
                // now let's add a polygon
                drawPolygon(polygonLocations);
            });
        }

        // draws a polygon
        function drawPolygon(points) {
            if (points.length < 3) {
                return;
            }
            // first delete the previous polygon
            if (polygon) {
                polygon.setMap(null);
            }

            polygon = new google.maps.Polygon({
                paths: points,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35,
                map: map
            });
            // display to input
            displaySelectedMarkers(polygon);
        }

        // display the selected markers to input.
        function displaySelectedMarkers(polygon) {
            // empty the input
            document.getElementById('selected_markers').value = '';
            var a = 0;  // I use this to set a comma between the values, but no comma at the end

            for (var i = 0, allcust; allcust = allcusts[i]; i++) {

                if (google.maps.geometry.poly.containsLocation(allcust.koordinat, polygon)) {
                    document.getElementById('selected_markers').value += (a++ > 0 ? ', ' : '') + allcust.customer_code;
                }
            }
        }

        function clearSelection() {
            if (polygon) {
                polygon.setMap(null);
            }
            for (var i in polygonMarkers) {
                polygonMarkers[i].setMap(null);
            }
            polygonLocations = [];

            console.log("marker selected:");
            console.log(markerselected);
            if (markerselected.length > 0) {
                for (var i = 0, mark; mark = markerselected[i]; i++) {
                    mark.setIcon(mark.get('default_icon'));
                }
            }

            document.getElementById('selected_markers').value = '';
        }

        
        $(document).ready(function () {
            google.maps.event.addDomListener(window, 'load', initialize);
        });
    </script>
}